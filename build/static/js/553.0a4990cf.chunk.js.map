{"version":3,"file":"static/js/553.0a4990cf.chunk.js","mappings":"kPAIA,MAAMA,EAAaC,gCAuDnB,EArDaC,KACX,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,IAqCnC,OAnCAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,GAAa,IAAIC,EAAAA,GACpBC,QAAQ,GAADC,OAAIV,EAAU,qBACrBW,QAEHJ,EAAWK,QAAQC,MAAK,KACtBC,QAAQC,IAAI,8BAA8B,IACzCC,OAAOC,IACRH,QAAQG,MAAM,0CAA2CA,EAAM,IAGjEV,EAAWW,GAAG,sBAAsB,CAACC,EAAQC,KAC3ChB,GAASiB,GACPA,EAAUC,KAAIC,GACZA,EAAKJ,SAAWA,EAAS,IAAKI,EAAMC,SAAUJ,GAAWG,KAE5D,IAcH,MAXmBE,WACjB,IACE,MAAMC,QAAiBC,EAAAA,EAAMC,IAAI,GAADlB,OAAIV,EAAU,eAC9CI,EAASsB,EAASG,KACpB,CAAE,MAAOZ,GACPH,QAAQG,MAAM,wBAAyBA,EACzC,GAGFa,GAEO,KACLvB,EAAWwB,MAAM,CAClB,GACA,KAGDC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EAEEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,oBACJC,EAAAA,EAAAA,KAAA,MAAAD,SACG9B,EAAMmB,KAAIC,IACTS,EAAAA,EAAAA,MAAA,MAAAC,SAAA,IAAAvB,OACMa,EAAKY,UAAS,KAAAzB,OAAIa,EAAKa,UAAW,MAAIb,EAAKC,SAAW,SAAW,YAD9DD,EAAKJ,cAKd,C","sources":["views/Chats/Chat.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport * as signalR from \"@microsoft/signalr\";\r\n\r\nconst ApiBaseUrl = process.env.REACT_APP_BASE_URL\r\n\r\nconst Chat = () => {\r\n  const [users, setUsers] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const connection = new signalR.HubConnectionBuilder()\r\n      .withUrl(`${ApiBaseUrl}/onlineStatusHub`) // Replace with your SignalR hub URL\r\n      .build();\r\n\r\n    connection.start().then(() => {\r\n      console.log(\"Online status hub connected\");\r\n    }).catch((error) => {\r\n      console.error(\"Error connecting to online status hub: \", error);\r\n    });\r\n\r\n    connection.on(\"UpdateOnlineStatus\", (userId, online) => {\r\n      setUsers(prevUsers => \r\n        prevUsers.map(user => \r\n          user.userId === userId ? { ...user, isOnline: online } : user\r\n        )\r\n      );\r\n    });\r\n\r\n    const fetchUsers = async () => {\r\n      try {\r\n        const response = await axios.get(`${ApiBaseUrl}/api/Users`); // Replace with your API endpoint\r\n        setUsers(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching users:', error);\r\n      }\r\n    };\r\n\r\n    fetchUsers();\r\n\r\n    return () => {\r\n      connection.stop();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n\r\n      <h2>List of Users:</h2>\r\n      <ul>\r\n        {users.map(user => (\r\n          <li key={user.userId}>\r\n            {`${user.firstName} ${user.lastName}`} - {user.isOnline ? \"Online\" : \"Offline\"}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n"],"names":["ApiBaseUrl","process","Chat","users","setUsers","useState","useEffect","connection","signalR","withUrl","concat","build","start","then","console","log","catch","error","on","userId","online","prevUsers","map","user","isOnline","async","response","axios","get","data","fetchUsers","stop","_jsxs","children","_jsx","firstName","lastName"],"sourceRoot":""}