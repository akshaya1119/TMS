{"version":3,"file":"static/js/9506.785b72f6.chunk.js","mappings":"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","sources":["context/Security.jsx","views/dashboard/DashboardTable.jsx","views/charts/Charts.js","views/dashboard/DueToday.js","views/dashboard/Dashboard.js"],"sourcesContent":["// SecurityContext.jsx \r\nimport { createContext, useContext } from 'react'; \r\nimport CryptoJS from 'crypto-js'; \r\nconst SecretKey = process.env.REACT_APP_SECRET_KEY || \"ghjsfysdg123\"; \r\n \r\n \r\n// Encryption and decryption functions using AES \r\nconst encrypt = (data) => { \r\n  const encryptedData = CryptoJS.AES.encrypt(data.toString(), SecretKey).toString(); \r\n  return encryptedData.replace(/\\//g, ';'); \r\n}; \r\n \r\nconst decrypt = (encryptedData) => { \r\n  if (typeof encryptedData !== 'string') { \r\n    // If encryptedData is not a string, return it as is \r\n    return encryptedData; \r\n  } \r\n  encryptedData = encryptedData.replace(/;/g, '/'); \r\n  const decryptedData = CryptoJS.AES.decrypt(encryptedData, SecretKey).toString(CryptoJS.enc.Utf8); \r\n  return decryptedData; \r\n}; \r\n \r\n// Create the SecurityContext \r\nconst SecurityContext = createContext({ encrypt, decrypt }); \r\n \r\n// Custom hook to use the SecurityContext \r\nexport const useSecurity = () => useContext(SecurityContext); \r\n \r\nexport default SecurityContext;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Table, Modal, OverlayTrigger, Tooltip, Button } from 'react-bootstrap';\r\nimport $ from 'jquery';\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEye, faPenSquare, faClockRotateLeft } from '@fortawesome/free-solid-svg-icons';\r\nimport axios from 'axios';\r\nimport { useSecurity } from './../../context/Security';\r\n\r\n\r\n\r\nconst TicketFLowByComment = process.env.REACT_APP_API_TICKETFLOW_BY_COMMENTS;\r\nconst Tickets = process.env.REACT_APP_API_TICKET;\r\nconst Attach = process.env.REACT_APP_BASE_URL;\r\n\r\nconst DashboardTable = ({ tickets, setTickets }) => {\r\n  const {encrypt} = useSecurity();\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const [selectedTicket, setSelectedTicket] = useState(null);\r\n  const [comments, setComments] = useState({});\r\n  const [showConfirmationModal, setShowConfirmationModal] = useState(false);\r\n  const [showAttachmentModal, setShowAttachmentModal] = useState(false);\r\n  const [isImageAttachment, setIsImageAttachment] = useState(false);\r\n  const tableRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (tableRef.current) {\r\n      $(tableRef.current).DataTable({\r\n        order: [[4,'desc']],\r\n        \r\n       }\r\n      );\r\n    }\r\n\r\n    // Fetch comments for each ticket\r\n    const fetchComments = async (ticketId) => {\r\n      try {\r\n        const response = await fetch(`${TicketFLowByComment}/${ticketId}`);\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        const lastComment = data.length > 0 ? data[data.length - 1].comment : 'No comments';\r\n        setComments((prevComments) => ({ ...prevComments, [ticketId]: lastComment }));\r\n      } catch (error) {\r\n        console.error(`Error fetching comments for ticket ${ticketId}:`, error);\r\n      }\r\n    };\r\n    \r\n    \r\n    \r\n\r\n    // Fetch comments for each ticket in the tickets array\r\n    tickets.forEach((ticket) => {\r\n      fetchComments(ticket.ticketId);\r\n    });\r\n  }, [tickets]);\r\n\r\n  const handleCloseAttachmentModal = () => {\r\n    setShowAttachmentModal(false);\r\n  };\r\n\r\n  const handleViewTicket = (ticket) => {\r\n    setSelectedTicket(ticket);\r\n    setModalShow(true);\r\n  };\r\n\r\n  const handleShowConfirmationModal = (ticket) => {\r\n    setSelectedTicket(ticket);\r\n    setShowConfirmationModal(true);\r\n  };\r\n\r\n  const handleCloseConfirmationModal = () => {\r\n    setSelectedTicket(null);\r\n    setShowConfirmationModal(false);\r\n  };\r\n\r\n  const handleArchiveTicket = () => {\r\n    // Make API call to archive the ticket\r\n    axios\r\n      .put(`${Tickets}/${selectedTicket.ticketId}/archive`)\r\n      .then((response) => {\r\n        // Update tickets state in the parent component by removing the archived ticket\r\n        setTickets(tickets.filter((ticket) => ticket.ticketId !== selectedTicket.ticketId));\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error archiving ticket:', error);\r\n      });\r\n    handleCloseConfirmationModal();\r\n  };\r\n\r\n  return (\r\n\r\n    <div className='mt-6 table-responsive'>\r\n      <Table striped bordered hover ref={tableRef} className='table-primary' >\r\n        <thead>\r\n          <tr>\r\n            <th>S.No</th>\r\n            {/* <th>TicketID</th> */}\r\n            {/* <th>CreatorId</th> */}\r\n            <th>Title</th>\r\n            <th>Status</th>\r\n            <th>Priority</th>\r\n            {/* <th>TicketType</th> */}\r\n            <th>DueDate</th>\r\n            {/* <th>Department</th>\r\n          <th>ProjectType</th> */}\r\n            <th>Creator </th>\r\n            <th>Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {tickets.map((ticket, index) => (\r\n            <tr key={ticket.ticketId}>\r\n              <td>{index + 1}</td>\r\n\r\n              <td>\r\n                <OverlayTrigger\r\n                  key={ticket.ticketId}\r\n                  placement=\"top\"\r\n                  delay={{ show: 250, hide: 400 }}\r\n                  overlay={\r\n                    <Tooltip id={`tooltip-${ticket.ticketId}`}>\r\n                       {comments[ticket.ticketId] ? (\r\n                        <>\r\n                          Last comment:\r\n                          <div dangerouslySetInnerHTML={{ __html: comments[ticket.ticketId] }} />\r\n                        </>\r\n                      ) : (\r\n                        <div>Description: <br />{ticket.description}</div>\r\n                      )}\r\n                    </Tooltip>\r\n                  }\r\n                >\r\n                  <span>{ticket.title}</span>\r\n                </OverlayTrigger>\r\n              </td>\r\n              <td>{ticket.status}</td>\r\n              <td>{ticket.priority}</td>\r\n\r\n              <td>{new Date(ticket.dueDate).toLocaleString()}</td>\r\n\r\n              <td>{ticket.creatorName}</td>\r\n              <td>\r\n                <div className=\"d-flex gap-3 align-items-center\">\r\n\r\n                  <Link to={`/Tickets/EditTicket/${encrypt(ticket.ticketId)}`}>\r\n                    <FontAwesomeIcon icon={faPenSquare} className=\"text-primary\" />\r\n                  </Link>\r\n\r\n\r\n                  <Button variant=\"link\" onClick={() => handleViewTicket(ticket)}>\r\n                    <FontAwesomeIcon icon={faEye} className=\"text-success\" />\r\n                  </Button>\r\n\r\n\r\n                  <FontAwesomeIcon\r\n                    icon={faClockRotateLeft}\r\n                    className=\"text-danger\"\r\n                    onClick={() => handleShowConfirmationModal(ticket)} />\r\n\r\n                  <Modal show={showConfirmationModal} onHide={handleCloseConfirmationModal}>\r\n                    <Modal.Header closeButton>\r\n                      <Modal.Title>Confirm Archive</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                      Are you sure you want to archive ticket {selectedTicket ? selectedTicket.id : ''}?\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                      <Button variant=\"secondary\" onClick={handleCloseConfirmationModal}>\r\n                        Cancel\r\n                      </Button>\r\n                      <Button variant=\"danger\" onClick={handleArchiveTicket}>\r\n                        Archive\r\n                      </Button>\r\n                    </Modal.Footer>\r\n                  </Modal>\r\n\r\n\r\n                </div>\r\n              </td>\r\n\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n\r\n      {/* Ticket Details Modal */}\r\n      {selectedTicket && (\r\n        <Modal\r\n          show={modalShow}\r\n          onHide={() => setModalShow(false)}\r\n          size=\"lg\"\r\n          aria-labelledby=\"contained-modal-title-vcenter\"\r\n          centered\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">Ticket Details</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <p>Title: {selectedTicket.title}</p>\r\n            <p>Description: {selectedTicket.description}</p>\r\n            <p>Creator: {selectedTicket.creatorName}</p>\r\n            <p>Assignee: {selectedTicket.assigneeName}</p>\r\n            <p>Attachments:</p>\r\n            {selectedTicket.attachment && (\r\n              <div>\r\n                {isImageAttachment && /\\.(png|jpg|jpeg|gif|bmp)$/i.test(selectedTicket.attachment) ? (\r\n                  <img src={`${Attach}/${selectedTicket.attachment.replace('wwwroot/', '')}`} alt=\"Attachment\" className=\"img-fluid\" />\r\n                ) : (\r\n                  <p>\r\n                    <a href={`${Attach}/${selectedTicket.attachment.replace('wwwroot/', '')}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                      View Attachment\r\n                    </a>\r\n                  </p>\r\n                )}\r\n              </div>\r\n            )}\r\n          </Modal.Body>\r\n\r\n          <Modal.Footer>\r\n            <Button onClick={() => setModalShow(false)}>Close</Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nDashboardTable.propTypes = {\r\n  tickets: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      // ticketId: PropTypes.number.isRequired,\r\n      // userId: PropTypes.number.isRequired,\r\n      title: PropTypes.string.isRequired,\r\n      status: PropTypes.string.isRequired,\r\n      priority: PropTypes.string.isRequired,\r\n      // ticketType: PropTypes.string.isRequired,\r\n      dueDate: PropTypes.string.isRequired,\r\n      // department: PropTypes.string.isRequired,\r\n      // projectType: PropTypes.string.isRequired,\r\n      creatorName: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n\r\n  setTickets: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default DashboardTable;\r\n","import React , { useState, useEffect }from 'react'\r\nimport { CCard, CCardBody, CCol, CCardHeader, CRow } from '@coreui/react'\r\nimport {\r\n  CChartBar,\r\n  CChartDoughnut,\r\n  CChartLine,\r\n  CChartPie,\r\n  CChartPolarArea,\r\n  CChartRadar,\r\n} from '@coreui/react-chartjs'\r\nimport { DocsCallout } from 'src/components'\r\nimport { useUser } from './../../context/UserContext'\r\n\r\nconst Tickets = process.env.REACT_APP_API_TICKET;\r\n\r\nconst Charts = () => {\r\n  const random = () => Math.round(Math.random() * 100)\r\n  const {user} = useUser();\r\n  const [counts, setCounts] = useState({\r\n    open: 0,\r\n    pending: 0,\r\n    selfassigned: 0,\r\n    completed: 0\r\n  });\r\n  const [tickets, setTickets] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    \r\n    const fetchCountsAndTickets = async () => {\r\n      try {\r\n        // Fetch counts\r\n        const countsResponse = await fetch(`${Tickets}/status-count?id=${user.userId}`,\r\n        {\r\n          headers:{\r\n            Authorization : `Bearer ${user?.token}`,\r\n          }\r\n        },\r\n        );\r\n        const countsData = await countsResponse.json();\r\n        setCounts({\r\n          open: countsData.openCount,\r\n          pending: countsData.pendingCount,\r\n          selfassigned: countsData.selfassignedCount,\r\n          completed: countsData.completedCount\r\n        });\r\n  \r\n        // Fetch tickets\r\n        const ticketsResponse = await fetch(`${Tickets}/ByUser?Id=${user.userId}`,\r\n        {\r\n          headers:{\r\n            Authorization : `Bearer ${user?.token}`,\r\n          }\r\n        },\r\n        );\r\n        const ticketsData = await ticketsResponse.json();\r\n        setTickets(ticketsData);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n  \r\n    fetchCountsAndTickets();\r\n  }, [user]); // Include setCounts and setTickets in the dependency array\r\n\r\n\r\n\r\n  return (\r\n    <CRow>\r\n      {/* <CCol xs={12}>\r\n        <DocsCallout\r\n          name=\"Chart\"\r\n          href=\"components/chart\"\r\n          content=\"React wrapper component for Chart.js 3.0, the most popular charting library.\"\r\n        />\r\n      </CCol>\r\n      <CCol xs={6}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>Bar Chart</CCardHeader>\r\n          <CCardBody>\r\n            <CChartBar\r\n              data={{\r\n                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n                datasets: [\r\n                  {\r\n                    label: 'GitHub Commits',\r\n                    backgroundColor: '#f87979',\r\n                    data: [40, 20, 12, 39, 10, 40, 39, 80, 40],\r\n                  },\r\n                ],\r\n              }}\r\n              labels=\"months\"\r\n            />\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={6}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>Line Chart</CCardHeader>\r\n          <CCardBody>\r\n            <CChartLine\r\n              data={{\r\n                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n                datasets: [\r\n                  {\r\n                    label: 'My First dataset',\r\n                    backgroundColor: 'rgba(220, 220, 220, 0.2)',\r\n                    borderColor: 'rgba(220, 220, 220, 1)',\r\n                    pointBackgroundColor: 'rgba(220, 220, 220, 1)',\r\n                    pointBorderColor: '#fff',\r\n                    data: [random(), random(), random(), random(), random(), random(), random()],\r\n                  },\r\n                  {\r\n                    label: 'My Second dataset',\r\n                    backgroundColor: 'rgba(151, 187, 205, 0.2)',\r\n                    borderColor: 'rgba(151, 187, 205, 1)',\r\n                    pointBackgroundColor: 'rgba(151, 187, 205, 1)',\r\n                    pointBorderColor: '#fff',\r\n                    data: [random(), random(), random(), random(), random(), random(), random()],\r\n                  },\r\n                ],\r\n              }}\r\n            />\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={6}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>Doughnut Chart</CCardHeader>\r\n          <CCardBody>\r\n            <CChartDoughnut\r\n              data={{\r\n                labels: ['VueJs', 'EmberJs', 'ReactJs', 'AngularJs'],\r\n                datasets: [\r\n                  {\r\n                    backgroundColor: ['#41B883', '#E46651', '#00D8FF', '#DD1B16'],\r\n                    data: [40, 20, 80, 10],\r\n                  },\r\n                ],\r\n              }}\r\n            />\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol> */}\r\n      <CCol xs={12} className='d-flex align-items-center justify-content-center'>\r\n        <CCard className=\"mb-4 \" style={{height: '370px', }}  >\r\n          {/* <CCardHeader>Pie Chart</CCardHeader> */}\r\n          \r\n          <CCardBody>\r\n            {\r\n              (counts.open==0  && counts.pending==0 && counts.selfassigned==0 && counts.completed==0)?(\r\n                <CChartPie\r\n              data={{\r\n                labels: ['No Data'],\r\n                datasets: [\r\n                  {\r\n                    data: [100],\r\n                    backgroundColor: [ '#CCCCCC'],\r\n                    hoverBackgroundColor: ['#CCCCCC'],\r\n                  },\r\n                ],\r\n              }}\r\n            />\r\n              ):(\r\n                <CChartPie\r\n              data={{\r\n                labels: ['Open', 'Pending', 'Self-Assigned', 'Completed'],\r\n                datasets: [\r\n                  {\r\n                    data: [counts.open, counts.pending, counts.selfassigned, counts.completed],\r\n                    backgroundColor: [ '#08683A','#36A2EB', '#FFFF33', '#F77000'],\r\n                    hoverBackgroundColor: ['#08683A', '#36A2EB', '#FFFF33', '#F77000'],\r\n                  },\r\n                ],\r\n              }}\r\n            />\r\n              )\r\n            }\r\n            {/* <CChartPie\r\n              data={{\r\n                labels: ['Open', 'Pending', 'Self-Assigned', 'Completed'],\r\n                datasets: [\r\n                  {\r\n                    data: [counts.open, counts.pending, counts.selfassigned, counts.completed],\r\n                    backgroundColor: [ '#08683A','#36A2EB', '#FFFF33', '#F77000'],\r\n                    hoverBackgroundColor: ['#08683A', '#36A2EB', '#FFFF33', '#F77000'],\r\n                  },\r\n                ],\r\n              }}\r\n            /> */}\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      {/* <CCol xs={6}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>Polar Area Chart</CCardHeader>\r\n          <CCardBody>\r\n            <CChartPolarArea\r\n              data={{\r\n                labels: ['Active', 'Pending', 'Self-Assigned', 'Completed'],\r\n                datasets: [\r\n                  {\r\n                    data: [counts.active, counts.pending, counts.selfassigned, counts.completed],\r\n                    backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0'],\r\n                    hoverBackgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0']\r\n                  },\r\n                ],\r\n              }}\r\n            />\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={6}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>Radar Chart</CCardHeader>\r\n          <CCardBody>\r\n            <CChartRadar\r\n              data={{\r\n                labels: [\r\n                  'Eating',\r\n                  'Drinking',\r\n                  'Sleeping',\r\n                  'Designing',\r\n                  'Coding',\r\n                  'Cycling',\r\n                  'Running',\r\n                ],\r\n                datasets: [\r\n                  {\r\n                    label: 'My First dataset',\r\n                    backgroundColor: 'rgba(220, 220, 220, 0.2)',\r\n                    borderColor: 'rgba(220, 220, 220, 1)',\r\n                    pointBackgroundColor: 'rgba(220, 220, 220, 1)',\r\n                    pointBorderColor: '#fff',\r\n                    pointHighlightFill: '#fff',\r\n                    pointHighlightStroke: 'rgba(220, 220, 220, 1)',\r\n                    data: [65, 59, 90, 81, 56, 55, 40],\r\n                  },\r\n                  {\r\n                    label: 'My Second dataset',\r\n                    backgroundColor: 'rgba(151, 187, 205, 0.2)',\r\n                    borderColor: 'rgba(151, 187, 205, 1)',\r\n                    pointBackgroundColor: 'rgba(151, 187, 205, 1)',\r\n                    pointBorderColor: '#fff',\r\n                    pointHighlightFill: '#fff',\r\n                    pointHighlightStroke: 'rgba(151, 187, 205, 1)',\r\n                    data: [28, 48, 40, 19, 96, 27, 100],\r\n                  },\r\n                ],\r\n              }}\r\n            />\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol> */}\r\n    </CRow>\r\n  )\r\n}\r\n\r\nexport default Charts\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Card, Table } from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport { useUser } from './../../context/UserContext';\r\n\r\nconst ApiBaseUrl = process.env.REACT_APP_BASE_URL;\r\n\r\nconst DueToday = () => {\r\n  const [tickets, setTickets] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const { user, isLoading, isError } = useUser();\r\n  const [dueTodayTasks, setDueTodayTasks] = useState([]);\r\n  const [upcomingTasks, setUpcomingTasks] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (!isLoading && !isError) {\r\n      fetchDueTodayTickets();\r\n    }\r\n  }, [isLoading, isError, user.email]);\r\n\r\n  const fetchDueTodayTickets = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await axios.get(`${ApiBaseUrl}/api/Tickets?userId=${user.userId}`,{\r\n        headers:{\r\n          Authorization : `Bearer ${user?.token}`,\r\n        }\r\n      });\r\n      // Filter tickets where assigneeEmail matches the logged-in user's email\r\n      const filteredTickets = response.data.filter(ticket => ticket.assigneeId === user.userId && ticket.status!= 'Completed');\r\n      setTickets(filteredTickets);\r\n      const todayTasks = getTicketsDueToday(filteredTickets);\r\n      const upcomingTasks = getUpcomingDueDateTickets(filteredTickets);\r\n      setDueTodayTasks(todayTasks);\r\n      setUpcomingTasks(upcomingTasks);\r\n    } catch (error) {\r\n      console.error('Error fetching tickets:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getTicketsDueToday = (allTickets) => {\r\n    // Get today's date\r\n    const today = new Date().toISOString().split('T')[0];\r\n    // Filter tickets that are due today\r\n    return allTickets.filter(ticket => ticket.dueDate.split('T')[0] === today);\r\n  };\r\n\r\n  const getUpcomingDueDateTickets = (allTickets) => {\r\n    // Get today's date\r\n    const today = new Date();\r\n    // Calculate the date for two days from today\r\n    const twoDaysLater = new Date();\r\n    twoDaysLater.setDate(today.getDate() + 2);\r\n    // Filter tickets that have due date within the next two days\r\n    return allTickets.filter(ticket => {\r\n      const dueDate = new Date(ticket.dueDate);\r\n      return dueDate > today && dueDate <= twoDaysLater;\r\n    });\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (isError) {\r\n    return <div>Error fetching user data.</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {(dueTodayTasks.length === 0) ? (\r\n        <Card className='mt-2'>\r\n          <Card.Body>\r\n            <div className='text-center'>No tasks due today.</div>\r\n          </Card.Body>\r\n        </Card>\r\n      ) : (\r\n        <>\r\n          <Card className='mt-2'>\r\n            <Card.Body>\r\n              <Table striped bordered hover>\r\n                <thead>\r\n                  <tr>\r\n                    <th>S.No</th>\r\n                    <th>Title</th>\r\n                    <th>Deadline</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {dueTodayTasks.map((ticket, index) => (\r\n                    <tr key={ticket.ticketId}>\r\n                      <td>{index + 1}</td>\r\n                      <td>{ticket.title}</td>\r\n                      <td>{ticket.dueDate.split('T')[0]}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </Table>\r\n            </Card.Body>\r\n          </Card>\r\n        </>\r\n      )}\r\n      {(upcomingTasks.length > 0) && (\r\n        <Card className='mt-2'>\r\n          <Card.Body>\r\n            <h5>Upcoming Due Date Tasks</h5>\r\n            <Table striped bordered hover>\r\n              <thead>\r\n                <tr>\r\n                  <th>S.No</th>\r\n                  <th>Title</th>\r\n                  <th>Deadline</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {upcomingTasks.map((ticket, index) => (\r\n                  <tr key={ticket.ticketId}>\r\n                    <td>{index + 1}</td>\r\n                    <td>{ticket.title}</td>\r\n                    <td>{ticket.dueDate.split('T')[0]}</td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </Table>\r\n          </Card.Body>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DueToday;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Col, Container, Row, Spinner, Button } from 'react-bootstrap'\r\nimport DashboardTable from './DashboardTable';\r\nimport { useUser } from './../../context/UserContext';\r\nimport './Dashboard.css';\r\nimport Charts from './../../views/charts/Charts';\r\nimport DueToday from './DueToday';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst Tickets = process.env.REACT_APP_API_TICKET;\r\n\r\nconst Dashboard = () => {\r\n  const { user } = useUser();\r\n  const [counts, setCounts] = useState({\r\n    open: 0,\r\n    pending: 0,\r\n    selfassigned: 0,\r\n    completed: 0\r\n  });\r\n  const [tickets, setTickets] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [showDueToday, setShowDueToday] = useState(false);\r\n  let navigate = useNavigate();\r\n\r\n \r\n\r\n\r\n  useEffect(() => {\r\n    const fetchCountsAndTickets = async () => {\r\n      try {\r\n        // Fetch counts\r\n        const countsResponse = await fetch(`${Tickets}/status-count?id=${user.userId}`,{\r\n          headers:{\r\n            Authorization : `Bearer ${user?.token}`,\r\n          }\r\n        });\r\n       \r\n        const countsData = await countsResponse.json();\r\n        setCounts({\r\n          open: countsData.openCount,\r\n          pending: countsData.pendingCount,\r\n          selfassigned: countsData.selfassignedCount,\r\n          completed: countsData.completedCount\r\n        });\r\n console.log('Token:', user?.token);\r\n        // Fetch tickets\r\n        const ticketsResponse = await fetch(`${Tickets}/ByUser?Id=${user.userId}`,{\r\n          headers:{\r\n            Authorization : `Bearer ${user?.token}`,\r\n          }\r\n        });\r\n        const ticketsData = await ticketsResponse.json();\r\n        setTickets(ticketsData);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchCountsAndTickets();\r\n  }, [user]); // Include setCounts and setTickets in the dependency array\r\n\r\n  const onClickDueToday = () => {\r\n    setShowDueToday(!showDueToday);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <Row className='row-cols-1 row-cols-md-2'>\r\n          <Col md={6}>\r\n            <Row className='mb-3'>\r\n              <Col>\r\n                <div className=\"card-client\">\r\n                  <div className=\"user-picture\">\r\n\r\n                    <p className=\"number\">{counts.open}</p>\r\n                  </div>\r\n                  <p className=\"name-client\">Open</p>\r\n                </div>\r\n              </Col>\r\n              <Col>\r\n                <div className=\"card-client\">\r\n                  <div className=\"user-picture\">\r\n\r\n                    <p className=\"number\">{counts.pending}</p>\r\n                  </div>\r\n                  <p className=\"name-client\">Pending</p>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <div className=\"card-client\">\r\n                  <div className=\"user-picture\">\r\n\r\n                    <p className=\"number\">{counts.selfassigned}</p>\r\n                  </div>\r\n                  <p className=\"name-client\">Self Assigned</p>\r\n                </div>\r\n              </Col>\r\n              <Col>\r\n                <div className=\"card-client\">\r\n                  <div className=\"user-picture\">\r\n\r\n                    <p className=\"number\">{counts.completed}</p>\r\n                  </div>\r\n                  <p className=\"name-client\">Completed</p>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n          <Col md={4} style={{ display: showDueToday ? 'none' : 'block' }}>\r\n            {/* Include your Pie Chart component here */}\r\n            <Charts />\r\n          </Col>\r\n          {/* Wrap both the button and DueToday component in a single Col with md={2} */}\r\n          <Col md={!showDueToday && 2} >\r\n            <Row>\r\n              <Col>\r\n                <div className='text-end'>\r\n                  <Button onClick={onClickDueToday} variant=\"danger\">\r\n                    Due Today\r\n                  </Button>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                {/* Conditionally render DueToday component based on showDueToday */}\r\n                {showDueToday && <DueToday />}\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n\r\n      {loading ? (\r\n        <div className=\"text-center\">\r\n          <Spinner animation=\"border\" role=\"status\">\r\n            <span className='visually-hidden'>loading..</span>\r\n          </Spinner>\r\n        </div>\r\n      ) : (\r\n        <DashboardTable tickets={tickets} setTickets={setTickets} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default Dashboard;\r\n"],"names":["SecretKey","process","REACT_APP_SECRET_KEY","SecurityContext","createContext","encrypt","data","CryptoJS","toString","replace","decrypt","encryptedData","Utf8","useSecurity","useContext","Attach","_ref","tickets","setTickets","modalShow","setModalShow","useState","selectedTicket","setSelectedTicket","comments","setComments","showConfirmationModal","setShowConfirmationModal","showAttachmentModal","setShowAttachmentModal","isImageAttachment","setIsImageAttachment","tableRef","useRef","useEffect","current","$","DataTable","order","forEach","ticket","async","response","fetch","concat","ticketId","ok","Error","status","json","lastComment","length","comment","prevComments","error","console","fetchComments","handleCloseConfirmationModal","handleArchiveTicket","axios","put","then","filter","catch","_jsxs","className","children","Table","striped","bordered","hover","ref","_jsx","map","index","OverlayTrigger","placement","delay","show","hide","overlay","Tooltip","id","_Fragment","dangerouslySetInnerHTML","__html","description","title","priority","Date","dueDate","toLocaleString","creatorName","Link","to","FontAwesomeIcon","icon","faPenSquare","Button","variant","onClick","handleViewTicket","faEye","faClockRotateLeft","handleShowConfirmationModal","Modal","onHide","Header","closeButton","Title","Body","Footer","size","centered","assigneeName","attachment","test","src","alt","href","target","rel","Tickets","Charts","user","useUser","counts","setCounts","open","pending","selfassigned","completed","loading","setLoading","countsResponse","userId","headers","Authorization","token","countsData","openCount","pendingCount","selfassignedCount","completedCount","ticketsResponse","ticketsData","fetchCountsAndTickets","CRow","CCol","xs","CCard","style","height","CCardBody","CChartPie","labels","datasets","backgroundColor","hoverBackgroundColor","DueToday","isLoading","isError","dueTodayTasks","setDueTodayTasks","upcomingTasks","setUpcomingTasks","fetchDueTodayTickets","email","filteredTickets","get","assigneeId","todayTasks","getTicketsDueToday","getUpcomingDueDateTickets","allTickets","today","toISOString","split","twoDaysLater","setDate","getDate","Card","Dashboard","showDueToday","setShowDueToday","useNavigate","log","Container","Row","Col","md","display","onClickDueToday","Spinner","animation","role","DashboardTable"],"sourceRoot":""}