{"version":3,"file":"static/js/9958.9171f479.chunk.js","mappings":"uSAaA,MAAMA,EAAUC,4CA+MhB,EA7MeC,KACb,MACM,KAACC,IAAQC,EAAAA,EAAAA,MACRC,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,CACnCC,KAAM,EACNC,QAAS,EACTC,aAAc,EACdC,UAAW,KAENC,EAASC,IAAcN,EAAAA,EAAAA,UAAS,KAChCO,EAASC,IAAcR,EAAAA,EAAAA,WAAS,GAiCvC,OA/BAS,EAAAA,EAAAA,YAAU,KAEsBC,WAC5B,IAEE,MAAMC,QAAuBC,MAAM,GAADC,OAAIpB,EAAO,wBAAAoB,OAAuBjB,EAAKkB,QACnEC,QAAmBJ,EAAeK,OACxCjB,EAAU,CACRE,KAAMc,EAAWE,UACjBf,QAASa,EAAWG,aACpBf,aAAcY,EAAWI,kBACzBf,UAAWW,EAAWK,iBAIxB,MAAMC,QAAwBT,MAAM,GAADC,OAAIpB,EAAO,kBAAAoB,OAAiBjB,EAAKkB,QAC9DQ,QAAoBD,EAAgBL,OAC1CV,EAAWgB,GACXd,GAAW,EACb,CAAE,MAAOe,GACPC,QAAQD,MAAM,uBAAwBA,EACxC,CAAC,QACCf,GAAW,EACb,GAGFiB,EAAuB,GACtB,CAAC7B,KAKF8B,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAAAC,UA4EHF,EAAAA,EAAAA,KAACG,EAAAA,EAAI,CAACC,GAAI,GAAIC,UAAU,mDAAkDH,UACxEF,EAAAA,EAAAA,KAACM,EAAAA,EAAK,CAACD,UAAU,QAAQE,MAAO,CAACC,OAAQ,SAAWN,UAGlDF,EAAAA,EAAAA,KAACS,EAAAA,EAAS,CAAAP,UACRF,EAAAA,EAAAA,KAACU,EAAAA,GAAS,CACRC,KAAM,CACJC,OAAQ,CAAC,OAAQ,UAAW,gBAAiB,aAC7CC,SAAU,CACR,CACEF,KAAM,CAACvC,EAAOG,KAAMH,EAAOI,QAASJ,EAAOK,aAAcL,EAAOM,WAChEoC,gBAAiB,CAAE,UAAU,UAAW,UAAW,WACnDC,qBAAsB,CAAC,UAAW,UAAW,UAAW,uBAqEjE,C","sources":["views/charts/Charts.js"],"sourcesContent":["import React , { useState, useEffect }from 'react'\r\nimport { CCard, CCardBody, CCol, CCardHeader, CRow } from '@coreui/react'\r\nimport {\r\n  CChartBar,\r\n  CChartDoughnut,\r\n  CChartLine,\r\n  CChartPie,\r\n  CChartPolarArea,\r\n  CChartRadar,\r\n} from '@coreui/react-chartjs'\r\nimport { DocsCallout } from 'src/components'\r\nimport { useUser } from './../../context/UserContext'\r\n\r\nconst Tickets = process.env.REACT_APP_API_TICKET;\r\n\r\nconst Charts = () => {\r\n  const random = () => Math.round(Math.random() * 100)\r\n  const {user} = useUser();\r\n  const [counts, setCounts] = useState({\r\n    open: 0,\r\n    pending: 0,\r\n    selfassigned: 0,\r\n    completed: 0\r\n  });\r\n  const [tickets, setTickets] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    \r\n    const fetchCountsAndTickets = async () => {\r\n      try {\r\n        // Fetch counts\r\n        const countsResponse = await fetch(`${Tickets}/status-count?email=${user.email}`);\r\n        const countsData = await countsResponse.json();\r\n        setCounts({\r\n          open: countsData.openCount,\r\n          pending: countsData.pendingCount,\r\n          selfassigned: countsData.selfassignedCount,\r\n          completed: countsData.completedCount\r\n        });\r\n  \r\n        // Fetch tickets\r\n        const ticketsResponse = await fetch(`${Tickets}/ByUser?email=${user.email}`);\r\n        const ticketsData = await ticketsResponse.json();\r\n        setTickets(ticketsData);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n  \r\n    fetchCountsAndTickets();\r\n  }, [user]); // Include setCounts and setTickets in the dependency array\r\n\r\n\r\n\r\n  return (\r\n    <CRow>\r\n      {/* <CCol xs={12}>\r\n        <DocsCallout\r\n          name=\"Chart\"\r\n          href=\"components/chart\"\r\n          content=\"React wrapper component for Chart.js 3.0, the most popular charting library.\"\r\n        />\r\n      </CCol>\r\n      <CCol xs={6}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>Bar Chart</CCardHeader>\r\n          <CCardBody>\r\n            <CChartBar\r\n              data={{\r\n                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n                datasets: [\r\n                  {\r\n                    label: 'GitHub Commits',\r\n                    backgroundColor: '#f87979',\r\n                    data: [40, 20, 12, 39, 10, 40, 39, 80, 40],\r\n                  },\r\n                ],\r\n              }}\r\n              labels=\"months\"\r\n            />\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={6}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>Line Chart</CCardHeader>\r\n          <CCardBody>\r\n            <CChartLine\r\n              data={{\r\n                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n                datasets: [\r\n                  {\r\n                    label: 'My First dataset',\r\n                    backgroundColor: 'rgba(220, 220, 220, 0.2)',\r\n                    borderColor: 'rgba(220, 220, 220, 1)',\r\n                    pointBackgroundColor: 'rgba(220, 220, 220, 1)',\r\n                    pointBorderColor: '#fff',\r\n                    data: [random(), random(), random(), random(), random(), random(), random()],\r\n                  },\r\n                  {\r\n                    label: 'My Second dataset',\r\n                    backgroundColor: 'rgba(151, 187, 205, 0.2)',\r\n                    borderColor: 'rgba(151, 187, 205, 1)',\r\n                    pointBackgroundColor: 'rgba(151, 187, 205, 1)',\r\n                    pointBorderColor: '#fff',\r\n                    data: [random(), random(), random(), random(), random(), random(), random()],\r\n                  },\r\n                ],\r\n              }}\r\n            />\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={6}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>Doughnut Chart</CCardHeader>\r\n          <CCardBody>\r\n            <CChartDoughnut\r\n              data={{\r\n                labels: ['VueJs', 'EmberJs', 'ReactJs', 'AngularJs'],\r\n                datasets: [\r\n                  {\r\n                    backgroundColor: ['#41B883', '#E46651', '#00D8FF', '#DD1B16'],\r\n                    data: [40, 20, 80, 10],\r\n                  },\r\n                ],\r\n              }}\r\n            />\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol> */}\r\n      <CCol xs={12} className='d-flex align-items-center justify-content-center'>\r\n        <CCard className=\"mb-4 \" style={{height: '370px', }}  >\r\n          {/* <CCardHeader>Pie Chart</CCardHeader> */}\r\n          \r\n          <CCardBody>\r\n            <CChartPie\r\n              data={{\r\n                labels: ['Open', 'Pending', 'Self-Assigned', 'Completed'],\r\n                datasets: [\r\n                  {\r\n                    data: [counts.open, counts.pending, counts.selfassigned, counts.completed],\r\n                    backgroundColor: [ '#08683A','#36A2EB', '#FFFF33', '#F77000'],\r\n                    hoverBackgroundColor: ['#08683A', '#36A2EB', '#FFFF33', '#F77000'],\r\n                  },\r\n                ],\r\n              }}\r\n            />\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      {/* <CCol xs={6}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>Polar Area Chart</CCardHeader>\r\n          <CCardBody>\r\n            <CChartPolarArea\r\n              data={{\r\n                labels: ['Active', 'Pending', 'Self-Assigned', 'Completed'],\r\n                datasets: [\r\n                  {\r\n                    data: [counts.active, counts.pending, counts.selfassigned, counts.completed],\r\n                    backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0'],\r\n                    hoverBackgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0']\r\n                  },\r\n                ],\r\n              }}\r\n            />\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol>\r\n      <CCol xs={6}>\r\n        <CCard className=\"mb-4\">\r\n          <CCardHeader>Radar Chart</CCardHeader>\r\n          <CCardBody>\r\n            <CChartRadar\r\n              data={{\r\n                labels: [\r\n                  'Eating',\r\n                  'Drinking',\r\n                  'Sleeping',\r\n                  'Designing',\r\n                  'Coding',\r\n                  'Cycling',\r\n                  'Running',\r\n                ],\r\n                datasets: [\r\n                  {\r\n                    label: 'My First dataset',\r\n                    backgroundColor: 'rgba(220, 220, 220, 0.2)',\r\n                    borderColor: 'rgba(220, 220, 220, 1)',\r\n                    pointBackgroundColor: 'rgba(220, 220, 220, 1)',\r\n                    pointBorderColor: '#fff',\r\n                    pointHighlightFill: '#fff',\r\n                    pointHighlightStroke: 'rgba(220, 220, 220, 1)',\r\n                    data: [65, 59, 90, 81, 56, 55, 40],\r\n                  },\r\n                  {\r\n                    label: 'My Second dataset',\r\n                    backgroundColor: 'rgba(151, 187, 205, 0.2)',\r\n                    borderColor: 'rgba(151, 187, 205, 1)',\r\n                    pointBackgroundColor: 'rgba(151, 187, 205, 1)',\r\n                    pointBorderColor: '#fff',\r\n                    pointHighlightFill: '#fff',\r\n                    pointHighlightStroke: 'rgba(151, 187, 205, 1)',\r\n                    data: [28, 48, 40, 19, 96, 27, 100],\r\n                  },\r\n                ],\r\n              }}\r\n            />\r\n          </CCardBody>\r\n        </CCard>\r\n      </CCol> */}\r\n    </CRow>\r\n  )\r\n}\r\n\r\nexport default Charts\r\n"],"names":["Tickets","process","Charts","user","useUser","counts","setCounts","useState","open","pending","selfassigned","completed","tickets","setTickets","loading","setLoading","useEffect","async","countsResponse","fetch","concat","email","countsData","json","openCount","pendingCount","selfassignedCount","completedCount","ticketsResponse","ticketsData","error","console","fetchCountsAndTickets","_jsx","CRow","children","CCol","xs","className","CCard","style","height","CCardBody","CChartPie","data","labels","datasets","backgroundColor","hoverBackgroundColor"],"sourceRoot":""}