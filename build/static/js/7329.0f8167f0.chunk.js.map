{"version":3,"file":"static/js/7329.0f8167f0.chunk.js","mappings":"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","sources":["views/TicketStatus/CompletedStatusTable.jsx","views/TicketStatus/CompletedStatus.js","../node_modules/react-bootstrap/esm/Table.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Table } from 'react-bootstrap';\r\nimport $ from 'jquery';\r\n\r\n\r\nconst CompletedStatusTable = ({ tickets }) => {\r\n    const tableRef = useRef(null)\r\n  useEffect(() => {\r\n    $(tableRef.current).DataTable();\r\n  }, [])\r\n  return (\r\n    <div className='mt-6 table-responsive'>\r\n      <Table striped bordered hover ref={tableRef} className='table-primary' >\r\n        <thead>\r\n          <tr>\r\n            <th>S.No</th>\r\n            {/* <th>TicketID</th> */}\r\n            {/* <th>CreatorId</th> */}\r\n            <th>Title</th>\r\n            <th>Status</th>\r\n            <th>Priority</th>\r\n            {/* <th>TicketType</th> */}\r\n            <th>DueDate</th>\r\n            {/* <th>Department</th>\r\n          <th>ProjectType</th> */}\r\n            {/* <th>AssignedTo</th> */}\r\n            {/* <th>Actions</th> */}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {tickets.map((ticket, index) => (\r\n            <tr key={ticket.ticketId}>\r\n              <td>{index + 1}</td>\r\n              {/* <td>{ticket.ticketId}</td> */}\r\n              {/* <td>{ticket.userId}</td> */}\r\n              <td>{ticket.title}</td>\r\n              <td>{ticket.status}</td>\r\n              <td>{ticket.priority}</td>\r\n              {/* <td>{ticket.ticketType}</td> */}\r\n              <td>{new Date(ticket.dueDate).toLocaleString()}</td>\r\n              {/* <td>{ticket.department}</td>\r\n            <td>{ticket.projectType}</td> */}\r\n              {/* <td>{ticket.assignedTo}</td> */}\r\n              \r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n\r\nCompletedStatusTable.propTypes = {\r\n    tickets: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        // ticketId: PropTypes.number.isRequired,\r\n        // userId: PropTypes.number.isRequired,\r\n        title: PropTypes.string.isRequired,\r\n        status: PropTypes.string.isRequired,\r\n        priority: PropTypes.string.isRequired,\r\n        // ticketType: PropTypes.string.isRequired,\r\n        dueDate: PropTypes.string.isRequired,\r\n        // department: PropTypes.string.isRequired,\r\n        // projectType: PropTypes.string.isRequired,\r\n        // assignedTo: PropTypes.number.isRequired,\r\n      })\r\n    ).isRequired,\r\n  };\r\n\r\nexport default CompletedStatusTable;","import React, { useState, useEffect }  from 'react';\r\nimport {  Spinner } from 'react-bootstrap'\r\nimport CompletedStatusTable from './CompletedStatusTable';\r\n\r\nconst ApiBaseUrl = process.env.REACT_APP_BASE_URL\r\nconst CompletedStatus = () => {\r\n    const [tickets, setTickets] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n  \r\n    useEffect(() => {\r\n      // Fetch user data from the API\r\n      fetch(`${ApiBaseUrl}/api/Tickets/status/completed`)\r\n        .then((res) => {\r\n          if (!res.ok) {\r\n            throw new Error(`HTTP error! Status: ${res.status}`);\r\n          }\r\n          return res.json();\r\n        })\r\n        .then((data) => {\r\n          setTickets(data);\r\n          setLoading(false);\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error fetching user data:', error);\r\n          setLoading(false);\r\n        });\r\n        const fetchTickets = async () => {\r\n            try {\r\n              // Fetch all tickets\r\n              const response = await fetch(`${ApiBaseUrl}/api/Tickets`);\r\n              const data = await response.json();\r\n      \r\n              // Filter high priority tickets\r\n              const CompletedStatusTickets = data.filter(ticket => ticket.priority === 'Completed');\r\n      \r\n              // Set tickets state with high priority tickets\r\n              setTickets(CompletedStatusTickets);\r\n            } catch (error) {\r\n              console.error('Error fetching tickets', error);\r\n            }\r\n          };\r\n\r\n           // Call the fetchTickets function\r\n            fetchTickets();\r\n        \r\n    }, []);\r\n  return (\r\n    <div>\r\n\r\n\r\n      {loading ? (\r\n        <div className=\"text-center\">\r\n          <Spinner animation=\"border\" role=\"status\">\r\n            <span className='visually-hidden'>loading..</span>\r\n          </Spinner>\r\n        </div>\r\n      ) : (\r\n\r\n      <CompletedStatusTable tickets={tickets} />\r\n      )\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default CompletedStatus","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Table = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  striped,\n  bordered,\n  borderless,\n  hover,\n  size,\n  variant,\n  responsive,\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  const classes = classNames(className, decoratedBsPrefix, variant && `${decoratedBsPrefix}-${variant}`, size && `${decoratedBsPrefix}-${size}`, striped && `${decoratedBsPrefix}-${typeof striped === 'string' ? `striped-${striped}` : 'striped'}`, bordered && `${decoratedBsPrefix}-bordered`, borderless && `${decoratedBsPrefix}-borderless`, hover && `${decoratedBsPrefix}-hover`);\n  const table = /*#__PURE__*/_jsx(\"table\", {\n    ...props,\n    className: classes,\n    ref: ref\n  });\n  if (responsive) {\n    let responsiveClass = `${decoratedBsPrefix}-responsive`;\n    if (typeof responsive === 'string') {\n      responsiveClass = `${responsiveClass}-${responsive}`;\n    }\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: responsiveClass,\n      children: table\n    });\n  }\n  return table;\n});\nexport default Table;"],"names":["_ref","tickets","tableRef","useRef","useEffect","$","current","DataTable","_jsx","className","children","_jsxs","Table","striped","bordered","hover","ref","map","ticket","index","title","status","priority","Date","dueDate","toLocaleString","ticketId","ApiBaseUrl","process","CompletedStatus","setTickets","useState","loading","setLoading","fetch","concat","then","res","ok","Error","json","data","catch","error","console","async","response","CompletedStatusTickets","filter","fetchTickets","Spinner","animation","role","CompletedStatusTable","React","bsPrefix","borderless","size","variant","responsive","props","decoratedBsPrefix","useBootstrapPrefix","classes","classNames","table","responsiveClass"],"sourceRoot":""}