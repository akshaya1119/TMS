{"version":3,"file":"static/js/276.f1a2aacd.chunk.js","mappings":"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","sources":["context/Security.jsx","views/Users/UpdatePermission.js"],"sourcesContent":["// SecurityContext.jsx \r\nimport { createContext, useContext } from 'react'; \r\nimport CryptoJS from 'crypto-js'; \r\nconst SecretKey = process.env.REACT_APP_SECRET_KEY || \"ghjsfysdg123\"; \r\n \r\n \r\n// Encryption and decryption functions using AES \r\nconst encrypt = (data) => { \r\n  const encryptedData = CryptoJS.AES.encrypt(data.toString(), SecretKey).toString(); \r\n  return encryptedData.replace(/\\//g, ';'); \r\n}; \r\n \r\nconst decrypt = (encryptedData) => { \r\n  if (typeof encryptedData !== 'string') { \r\n    // If encryptedData is not a string, return it as is \r\n    return encryptedData; \r\n  } \r\n  encryptedData = encryptedData.replace(/;/g, '/'); \r\n  const decryptedData = CryptoJS.AES.decrypt(encryptedData, SecretKey).toString(CryptoJS.enc.Utf8); \r\n  return decryptedData; \r\n}; \r\n \r\n// Create the SecurityContext \r\nconst SecurityContext = createContext({ encrypt, decrypt }); \r\n \r\n// Custom hook to use the SecurityContext \r\nexport const useSecurity = () => useContext(SecurityContext); \r\n \r\nexport default SecurityContext;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Container, Row, Col, Card, Alert, Table, Form, Button } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport axios from 'axios';\r\nimport { useSecurity } from './../../context/Security';\r\nimport PropTypes from 'prop-types';\r\nimport PermissionChecker from './../../context/PermissionChecker';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useUser } from 'src/context/UserContext';\r\n\r\nconst ApiBaseUrl = process.env.REACT_APP_BASE_URL;\r\n\r\nconst UpdatePermissionPage = ({ userId }) => {\r\n   \r\n    const {user} = useUser();\r\n    const { encrypt } = useSecurity();\r\n    const [permissions, setPermissions] = useState([]);\r\n    const [modules, setModules] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [successMessage, setSuccessMessage] = useState('');\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [selectedPermissionId, setSelectedPermissionId] = useState(null);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const fetchPermissions = async () => {\r\n            try {\r\n                const response = await axios.get(`${ApiBaseUrl}/api/Permission/ByUser/${userId}`,{\r\n                    headers:{\r\n                      Authorization : `Bearer ${user?.token}`,\r\n                    }\r\n                  });\r\n                if (response.data && response.data.length === 0) {\r\n                    setErrorMessage('No permissions have been assigned to this user. Thank You');\r\n                } else {\r\n                    setPermissions(response.data);\r\n                    setErrorMessage(''); // Clear error message if permissions are found\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching permissions:', error);\r\n                setErrorMessage('Error fetching permissions.');\r\n            }\r\n        };\r\n\r\n        const fetchModules = async () => {\r\n            try {\r\n                const response = await axios.get(`${ApiBaseUrl}/api/Modules`,{\r\n                    headers:{\r\n                      Authorization : `Bearer ${user?.token}`,\r\n                    }\r\n                  });\r\n                setModules(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching modules:', error);\r\n                setErrorMessage('Error fetching modules. Please try again.');\r\n            }\r\n        };\r\n\r\n        fetchPermissions();\r\n        fetchModules();\r\n    }, [userId]);\r\n\r\n    const handlePermissionChange = async (permissionId, field, isChecked) => {\r\n        setLoading(true);\r\n        setErrorMessage('');\r\n\r\n        try {\r\n            const updatedPermissions = permissions.map(permission => {\r\n                if (permission.permission_Id === permissionId) {\r\n                    if (field === 'canViewOnly' && !isChecked) {\r\n                        return {\r\n                            ...permission,\r\n                            canViewOnly: false,\r\n                            canAddOnly: false,\r\n                            canUpdateOnly: false,\r\n                            canDeleteOnly: false\r\n                        };\r\n                    }\r\n                    // Automatically grant additional permissions based on the updated permission\r\n                    return {\r\n                        ...permission,\r\n                        [field]: isChecked,\r\n                        ...(field === 'canViewOnly' && isChecked\r\n                            ? { canAddOnly: false, canUpdateOnly: false, canDeleteOnly: false }\r\n                            \r\n                            : field === 'canAddOnly' && isChecked\r\n                            ? { canViewOnly: true }\r\n                            : field === 'canUpdateOnly' && isChecked\r\n                            ? { canViewOnly: true, canAddOnly: true }\r\n                            : field === 'canDeleteOnly' && isChecked\r\n                            ? { canViewOnly: true, canAddOnly: true, canUpdateOnly: true }\r\n                            : {})\r\n                    };\r\n                }\r\n                return permission;\r\n            });\r\n\r\n            setPermissions(updatedPermissions);\r\n            setSelectedPermissionId(permissionId);\r\n\r\n            const updatedPermission = updatedPermissions.find(permission => permission.permission_Id === permissionId);\r\n            if (!updatedPermission) {\r\n                setErrorMessage('Updated permission not found. Please try again.');\r\n                return;\r\n            }\r\n\r\n            const { permission_Id: updatedPermissionId, userID, id, canAddOnly, canDeleteOnly, canUpdateOnly, canViewOnly } = updatedPermission;\r\n            await axios.put(`${ApiBaseUrl}/api/Permission/${updatedPermissionId}`, {\r\n                permission_Id: updatedPermissionId,\r\n                userID,\r\n                id,\r\n                canAddOnly,\r\n                canDeleteOnly,\r\n                canUpdateOnly,\r\n                canViewOnly\r\n            },{\r\n                headers:{\r\n                  Authorization : `Bearer ${user?.token}`,\r\n                }\r\n              });\r\n            setSuccessMessage('Permissions updated successfully');\r\n        } catch (error) {\r\n            console.error('Error updating permissions:', error);\r\n            setErrorMessage('Error updating permissions. Please try again.');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleAssignPermissions = () => {\r\n        navigate(`/Users/AddPermissions/${encrypt(userId)}`);\r\n    };\r\n\r\n    const getModuleNameById = (moduleId) => {\r\n        const module = modules.find(m => m.id === moduleId);\r\n        return module ? module.name : 'Unknown';\r\n    };\r\n\r\n    return (\r\n        <PermissionChecker>\r\n        {({ hasPermission }) => (\r\n            hasPermission(7, 'canUpdateOnly') &&  // Check if user has permission to update permissions\r\n\r\n            <Container>\r\n                {successMessage && !loading && <Alert variant=\"success\" className=\"mt-3\">{successMessage}</Alert>}\r\n                {errorMessage && !loading && <Alert variant=\"danger\" className=\"mt-3\">{errorMessage}</Alert>}\r\n                \r\n                <Row className=\"justify-content-center\">\r\n                    <Col md={12}>\r\n                        <Card>\r\n                            <Card.Header as=\"h5\" className=\"text-center\">Update Permissions</Card.Header>\r\n                            <Card.Body>\r\n                                <Form className='table-responsive'>\r\n                                    <Table bordered>\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th>Module Name</th>\r\n                                                <th>Can View</th>\r\n                                                <th>Can Add</th>\r\n                                                <th>Can Update</th>\r\n                                                <th>Can Delete</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {permissions.length > 0 ? permissions.map(permission => (\r\n                                                <tr key={permission.permission_Id}>\r\n                                                    <td>{getModuleNameById(permission.id)}</td>\r\n                                                    <td>\r\n                                                        <Form.Check\r\n                                                            type=\"switch\"\r\n                                                            id={`${getModuleNameById(permission.id)}-canview-switch`}\r\n                                                            label=\"\"\r\n                                                            checked={permission.canViewOnly}\r\n                                                            onChange={e => handlePermissionChange(permission.permission_Id, 'canViewOnly', e.target.checked)}\r\n                                                        />\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <Form.Check\r\n                                                            type=\"switch\"\r\n                                                            id={`${getModuleNameById(permission.id)}-canadd-switch`}\r\n                                                            label=\"\"\r\n                                                            checked={permission.canAddOnly}\r\n                                                            onChange={e => handlePermissionChange(permission.permission_Id, 'canAddOnly', e.target.checked)}\r\n                                                        />\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <Form.Check\r\n                                                            type=\"switch\"\r\n                                                            id={`${getModuleNameById(permission.id)}-canupdate-switch`}\r\n                                                            label=\"\"\r\n                                                            checked={permission.canUpdateOnly}\r\n                                                            onChange={e => handlePermissionChange(permission.permission_Id, 'canUpdateOnly', e.target.checked)}\r\n                                                        />\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <Form.Check\r\n                                                            type=\"switch\"\r\n                                                            id={`${getModuleNameById(permission.id)}-candelete-switch`}\r\n                                                            label=\"\"\r\n                                                            checked={permission.canDeleteOnly}\r\n                                                            onChange={e => handlePermissionChange(permission.permission_Id, 'canDeleteOnly', e.target.checked)}\r\n                                                        />\r\n                                                    </td>\r\n                                                </tr>\r\n                                            )) : (\r\n                                                <tr>\r\n                                                    <td colSpan=\"5\" className=\"text-center\">\r\n                                                        {errorMessage}\r\n                                                        <Button variant=\"primary\" onClick={handleAssignPermissions}>Assign Permissions</Button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            )}\r\n                                        </tbody>\r\n                                    </Table>\r\n                                </Form>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        )}\r\n        </PermissionChecker>\r\n    );\r\n};\r\n\r\nUpdatePermissionPage.propTypes = {\r\n    userId: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default UpdatePermissionPage;\r\n"],"names":["SecretKey","process","REACT_APP_SECRET_KEY","SecurityContext","createContext","encrypt","data","CryptoJS","toString","replace","decrypt","encryptedData","Utf8","useSecurity","useContext","ApiBaseUrl","_ref","userId","user","useUser","permissions","setPermissions","useState","modules","setModules","loading","setLoading","successMessage","setSuccessMessage","errorMessage","setErrorMessage","selectedPermissionId","setSelectedPermissionId","navigate","useNavigate","useEffect","async","response","axios","get","concat","headers","Authorization","token","length","error","console","fetchPermissions","fetchModules","handlePermissionChange","permissionId","field","isChecked","updatedPermissions","map","permission","permission_Id","canAddOnly","canUpdateOnly","canDeleteOnly","canViewOnly","updatedPermission","find","updatedPermissionId","userID","id","put","handleAssignPermissions","getModuleNameById","moduleId","module","m","name","_jsx","PermissionChecker","children","_ref2","hasPermission","_jsxs","Container","Alert","variant","className","Row","Col","md","Card","Header","as","Body","Form","Table","bordered","Check","type","label","checked","onChange","e","target","colSpan","Button","onClick"],"sourceRoot":""}