{"version":3,"file":"static/js/9557.271e20b8.chunk.js","mappings":"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","sources":["views/theme/typography/Typography.js","../node_modules/@coreui/react/src/components/card/CCard.tsx","../node_modules/@coreui/react/src/components/card/CCardBody.tsx","../node_modules/@coreui/react/src/components/card/CCardHeader.tsx"],"sourcesContent":["import React from 'react'\r\nimport { CCard, CCardHeader, CCardBody } from '@coreui/react'\r\nimport { DocsLink } from 'src/components'\r\n\r\nconst Typography = () => {\r\n  return (\r\n    <>\r\n      <CCard className=\"mb-4\">\r\n        <CCardHeader>\r\n          Headings\r\n          <DocsLink href=\"https://coreui.io/docs/content/typography/\" />\r\n        </CCardHeader>\r\n        <CCardBody>\r\n          <p>\r\n            Documentation and examples for Bootstrap typography, including global settings,\r\n            headings, body text, lists, and more.\r\n          </p>\r\n          <table className=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Heading</th>\r\n                <th>Example</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td>\r\n                  <p>\r\n                    <code className=\"highlighter-rouge\">&lt;h1&gt;&lt;/h1&gt;</code>\r\n                  </p>\r\n                </td>\r\n                <td>\r\n                  <span className=\"h1\">h1. Bootstrap heading</span>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  <p>\r\n                    <code className=\"highlighter-rouge\">&lt;h2&gt;&lt;/h2&gt;</code>\r\n                  </p>\r\n                </td>\r\n                <td>\r\n                  <span className=\"h2\">h2. Bootstrap heading</span>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  <p>\r\n                    <code className=\"highlighter-rouge\">&lt;h3&gt;&lt;/h3&gt;</code>\r\n                  </p>\r\n                </td>\r\n                <td>\r\n                  <span className=\"h3\">h3. Bootstrap heading</span>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  <p>\r\n                    <code className=\"highlighter-rouge\">&lt;h4&gt;&lt;/h4&gt;</code>\r\n                  </p>\r\n                </td>\r\n                <td>\r\n                  <span className=\"h4\">h4. Bootstrap heading</span>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  <p>\r\n                    <code className=\"highlighter-rouge\">&lt;h5&gt;&lt;/h5&gt;</code>\r\n                  </p>\r\n                </td>\r\n                <td>\r\n                  <span className=\"h5\">h5. Bootstrap heading</span>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  <p>\r\n                    <code className=\"highlighter-rouge\">&lt;h6&gt;&lt;/h6&gt;</code>\r\n                  </p>\r\n                </td>\r\n                <td>\r\n                  <span className=\"h6\">h6. Bootstrap heading</span>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </CCardBody>\r\n      </CCard>\r\n      <CCard className=\"mb-4\">\r\n        <CCardHeader>Headings</CCardHeader>\r\n        <CCardBody>\r\n          <p>\r\n            <code className=\"highlighter-rouge\">.h1</code> through\r\n            <code className=\"highlighter-rouge\">.h6</code>\r\n            classes are also available, for when you want to match the font styling of a heading but\r\n            cannot use the associated HTML element.\r\n          </p>\r\n          <div className=\"bd-example\">\r\n            <p className=\"h1\">h1. Bootstrap heading</p>\r\n            <p className=\"h2\">h2. Bootstrap heading</p>\r\n            <p className=\"h3\">h3. Bootstrap heading</p>\r\n            <p className=\"h4\">h4. Bootstrap heading</p>\r\n            <p className=\"h5\">h5. Bootstrap heading</p>\r\n            <p className=\"h6\">h6. Bootstrap heading</p>\r\n          </div>\r\n        </CCardBody>\r\n      </CCard>\r\n      <CCard className=\"mb-4\">\r\n        <div className=\"card-header\">Display headings</div>\r\n        <div className=\"card-body\">\r\n          <p>\r\n            Traditional heading elements are designed to work best in the meat of your page content.\r\n            When you need a heading to stand out, consider using a <strong>display heading</strong>\r\n            —a larger, slightly more opinionated heading style.\r\n          </p>\r\n          <div className=\"bd-example bd-example-type\">\r\n            <table className=\"table\">\r\n              <tbody>\r\n                <tr>\r\n                  <td>\r\n                    <span className=\"display-1\">Display 1</span>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>\r\n                    <span className=\"display-2\">Display 2</span>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>\r\n                    <span className=\"display-3\">Display 3</span>\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td>\r\n                    <span className=\"display-4\">Display 4</span>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </CCard>\r\n      <CCard className=\"mb-4\">\r\n        <CCardHeader>Inline text elements</CCardHeader>\r\n        <CCardBody>\r\n          <p>\r\n            Traditional heading elements are designed to work best in the meat of your page content.\r\n            When you need a heading to stand out, consider using a <strong>display heading</strong>\r\n            —a larger, slightly more opinionated heading style.\r\n          </p>\r\n          <div className=\"bd-example\">\r\n            <p>\r\n              You can use the mark tag to <mark>highlight</mark> text.\r\n            </p>\r\n            <p>\r\n              <del>This line of text is meant to be treated as deleted text.</del>\r\n            </p>\r\n            <p>\r\n              <s>This line of text is meant to be treated as no longer accurate.</s>\r\n            </p>\r\n            <p>\r\n              <ins>This line of text is meant to be treated as an addition to the document.</ins>\r\n            </p>\r\n            <p>\r\n              <u>This line of text will render as underlined</u>\r\n            </p>\r\n            <p>\r\n              <small>This line of text is meant to be treated as fine print.</small>\r\n            </p>\r\n            <p>\r\n              <strong>This line rendered as bold text.</strong>\r\n            </p>\r\n            <p>\r\n              <em>This line rendered as italicized text.</em>\r\n            </p>\r\n          </div>\r\n        </CCardBody>\r\n      </CCard>\r\n      <CCard className=\"mb-4\">\r\n        <CCardHeader>Description list alignment</CCardHeader>\r\n        <CCardBody>\r\n          <p>\r\n            Align terms and descriptions horizontally by using our grid system’s predefined classes\r\n            (or semantic mixins). For longer terms, you can optionally add a{' '}\r\n            <code className=\"highlighter-rouge\">.text-truncate</code> class to truncate the text\r\n            with an ellipsis.\r\n          </p>\r\n          <div className=\"bd-example\">\r\n            <dl className=\"row\">\r\n              <dt className=\"col-sm-3\">Description lists</dt>\r\n              <dd className=\"col-sm-9\">A description list is perfect for defining terms.</dd>\r\n\r\n              <dt className=\"col-sm-3\">Euismod</dt>\r\n              <dd className=\"col-sm-9\">\r\n                <p>\r\n                  Vestibulum id ligula porta felis euismod semper eget lacinia odio sem nec elit.\r\n                </p>\r\n                <p>Donec id elit non mi porta gravida at eget metus.</p>\r\n              </dd>\r\n\r\n              <dt className=\"col-sm-3\">Malesuada porta</dt>\r\n              <dd className=\"col-sm-9\">Etiam porta sem malesuada magna mollis euismod.</dd>\r\n\r\n              <dt className=\"col-sm-3 text-truncate\">Truncated term is truncated</dt>\r\n              <dd className=\"col-sm-9\">\r\n                Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut\r\n                fermentum massa justo sit amet risus.\r\n              </dd>\r\n\r\n              <dt className=\"col-sm-3\">Nesting</dt>\r\n              <dd className=\"col-sm-9\">\r\n                <dl className=\"row\">\r\n                  <dt className=\"col-sm-4\">Nested definition list</dt>\r\n                  <dd className=\"col-sm-8\">\r\n                    Aenean posuere, tortor sed cursus feugiat, nunc augue blandit nunc.\r\n                  </dd>\r\n                </dl>\r\n              </dd>\r\n            </dl>\r\n          </div>\r\n        </CCardBody>\r\n      </CCard>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Typography\r\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CCardProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Sets the text color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | 'primary-emphasis' | 'secondary-emphasis' | 'success-emphasis' | 'danger-emphasis' | 'warning-emphasis' | 'info-emphasis' | 'light-emphasis' | 'body' | 'body-emphasis' | 'body-secondary' | 'body-tertiary' | 'black' | 'black-50' | 'white' | 'white-50' | string\n   */\n  textColor?: string\n}\n\nexport const CCard = forwardRef<HTMLDivElement, CCardProps>(\n  ({ children, className, color, textColor, ...rest }, ref) => {\n    return (\n      <div\n        className={classNames(\n          'card',\n          {\n            [`bg-${color}`]: color,\n            [`text-${textColor}`]: textColor,\n          },\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCCard.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  textColor: PropTypes.string,\n}\n\nCCard.displayName = 'CCard'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardBodyProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CCardBody = forwardRef<HTMLDivElement, CCardBodyProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('card-body', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCCardBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCCardBody.displayName = 'CCardBody'\n","import React, { ElementType, forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CCardHeaderProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  component?: string | ElementType\n}\n\nexport const CCardHeader = forwardRef<HTMLDivElement, CCardHeaderProps>(\n  ({ children, component: Component = 'div', className, ...rest }, ref) => {\n    return (\n      <Component className={classNames('card-header', className)} {...rest} ref={ref}>\n        {children}\n      </Component>\n    )\n  },\n)\n\nCCardHeader.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  component: PropTypes.elementType,\n}\n\nCCardHeader.displayName = 'CCardHeader'\n"],"names":["Typography","_jsxs","_Fragment","children","CCard","className","CCardHeader","_jsx","DocsLink","href","CCardBody","forwardRef","_a","ref","color","textColor","rest","__rest","React","__assign","classNames","_b","concat","propTypes","PropTypes","colorPropType","displayName","component","Component"],"sourceRoot":""}