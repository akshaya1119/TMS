{"version":3,"file":"static/js/5769.25d7cee0.chunk.js","mappings":"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","sources":["context/Security.jsx","views/Users/Permission.js","views/Users/UpdatePermission.js"],"sourcesContent":["// SecurityContext.jsx \r\nimport { createContext, useContext } from 'react'; \r\nimport CryptoJS from 'crypto-js'; \r\nconst SecretKey = process.env.REACT_APP_SECRET_KEY || \"ghjsfysdg123\"; \r\n \r\n \r\n// Encryption and decryption functions using AES \r\nconst encrypt = (data) => { \r\n  const encryptedData = CryptoJS.AES.encrypt(data.toString(), SecretKey).toString(); \r\n  return encryptedData.replace(/\\//g, ';'); \r\n}; \r\n \r\nconst decrypt = (encryptedData) => { \r\n  if (typeof encryptedData !== 'string') { \r\n    // If encryptedData is not a string, return it as is \r\n    return encryptedData; \r\n  } \r\n  encryptedData = encryptedData.replace(/;/g, '/'); \r\n  const decryptedData = CryptoJS.AES.decrypt(encryptedData, SecretKey).toString(CryptoJS.enc.Utf8); \r\n  return decryptedData; \r\n}; \r\n \r\n// Create the SecurityContext \r\nconst SecurityContext = createContext({ encrypt, decrypt }); \r\n \r\n// Custom hook to use the SecurityContext \r\nexport const useSecurity = () => useContext(SecurityContext); \r\n \r\nexport default SecurityContext;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Select from 'react-select';\r\nimport axios from 'axios';\r\nimport { Container, Row, Col, Card, Button } from 'react-bootstrap';\r\nimport UpdatePermissionPage from './UpdatePermission';\r\nimport { useUser } from 'src/context/UserContext';\r\n\r\nconst Permission = () => {\r\n  const [users, setUsers] = useState([]);\r\n  const {user} = useUser();\r\n  const [selectedUser, setSelectedUser] = useState(null);\r\n  const [userDepartment, setUserDepartment] = useState('');\r\n  const [showPermissionPage, setShowPermissionPage] = useState(false);\r\n\r\n  const ApiBaseUrl = process.env.REACT_APP_BASE_URL\r\n  useEffect(() => {\r\n    // Fetch user data from your API and set the users state\r\n    const fetchUsers = async () => {\r\n      try {\r\n        const response = await axios.get(`${ApiBaseUrl}/api/Users`,{\r\n          headers:{\r\n            Authorization : `Bearer ${user?.token}`,\r\n          }\r\n        }); // Replace this with your API endpoint\r\n        setUsers(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching users:', error);\r\n      }\r\n    };\r\n\r\n    fetchUsers();\r\n  }, []);\r\n\r\n  // Function to handle user selection\r\n  const handleUserSelect = (user) => {\r\n    setSelectedUser(user);\r\n    setUserDepartment(user.departmentname);\r\n    setShowPermissionPage(false);\r\n  };\r\n \r\n  // Function to handle viewing permissions\r\n  const handleViewPermission = () => {\r\n    setShowPermissionPage(true);\r\n  };\r\n\r\n  return (\r\n    <Container className=\"py-4\">\r\n      <Row>\r\n        <Col md={4}>\r\n          <Card>\r\n            <Card.Body>\r\n              <h5 className=\"mb-4\">Select User to View Permissions</h5>\r\n              <Select\r\n                options={users.map((user) => ({\r\n                  value: user.userId.toString(),\r\n                  label: `${user.firstName} ${user.lastName}`,\r\n                  departmentname: user.departmentname, // Added departmentName property\r\n                }))}\r\n                filterOption={({ label }, searchString) => {\r\n                  return label.toLowerCase().includes(searchString.toLowerCase());\r\n                }}\r\n                placeholder=\"Search for a user...\"\r\n                onChange={handleUserSelect}\r\n                value={selectedUser}\r\n              />\r\n              {selectedUser && (\r\n                <div className=\"mt-4 \">\r\n                  <h6>Department Name: {userDepartment}</h6>\r\n                  <div className='text-center'>\r\n                    <Button onClick={handleViewPermission}>View Permission</Button>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n        <Col md={6}>\r\n        {showPermissionPage && selectedUser && (\r\n            <UpdatePermissionPage userId={selectedUser?.value} />\r\n          )}\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Permission;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Container, Row, Col, Card, Alert, Table, Form, Button } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport axios from 'axios';\r\nimport { useSecurity } from './../../context/Security';\r\nimport PropTypes from 'prop-types';\r\nimport PermissionChecker from './../../context/PermissionChecker';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useUser } from 'src/context/UserContext';\r\n\r\nconst ApiBaseUrl = process.env.REACT_APP_BASE_URL;\r\n\r\nconst UpdatePermissionPage = ({ userId }) => {\r\n   \r\n    const {user} = useUser();\r\n    const { encrypt } = useSecurity();\r\n    const [permissions, setPermissions] = useState([]);\r\n    const [modules, setModules] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [successMessage, setSuccessMessage] = useState('');\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [selectedPermissionId, setSelectedPermissionId] = useState(null);\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const fetchPermissions = async () => {\r\n            try {\r\n                const response = await axios.get(`${ApiBaseUrl}/api/Permission/ByUser/${userId}`,{\r\n                    headers:{\r\n                      Authorization : `Bearer ${user?.token}`,\r\n                    }\r\n                  });\r\n                if (response.data && response.data.length === 0) {\r\n                    setErrorMessage('No permissions have been assigned to this user. Thank You');\r\n                } else {\r\n                    setPermissions(response.data);\r\n                    setErrorMessage(''); // Clear error message if permissions are found\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching permissions:', error);\r\n                setErrorMessage('Error fetching permissions.');\r\n            }\r\n        };\r\n\r\n        const fetchModules = async () => {\r\n            try {\r\n                const response = await axios.get(`${ApiBaseUrl}/api/Modules`,{\r\n                    headers:{\r\n                      Authorization : `Bearer ${user?.token}`,\r\n                    }\r\n                  });\r\n                setModules(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching modules:', error);\r\n                setErrorMessage('Error fetching modules. Please try again.');\r\n            }\r\n        };\r\n\r\n        fetchPermissions();\r\n        fetchModules();\r\n    }, [userId]);\r\n\r\n    const handlePermissionChange = async (permissionId, field, isChecked) => {\r\n        setLoading(true);\r\n        setErrorMessage('');\r\n\r\n        try {\r\n            const updatedPermissions = permissions.map(permission => {\r\n                if (permission.permission_Id === permissionId) {\r\n                    if (field === 'canViewOnly' && !isChecked) {\r\n                        return {\r\n                            ...permission,\r\n                            canViewOnly: false,\r\n                            canAddOnly: false,\r\n                            canUpdateOnly: false,\r\n                            canDeleteOnly: false\r\n                        };\r\n                    }\r\n                    // Automatically grant additional permissions based on the updated permission\r\n                    return {\r\n                        ...permission,\r\n                        [field]: isChecked,\r\n                        ...(field === 'canViewOnly' && isChecked\r\n                            ? { canAddOnly: false, canUpdateOnly: false, canDeleteOnly: false }\r\n                            \r\n                            : field === 'canAddOnly' && isChecked\r\n                            ? { canViewOnly: true }\r\n                            : field === 'canUpdateOnly' && isChecked\r\n                            ? { canViewOnly: true, canAddOnly: true }\r\n                            : field === 'canDeleteOnly' && isChecked\r\n                            ? { canViewOnly: true, canAddOnly: true, canUpdateOnly: true }\r\n                            : {})\r\n                    };\r\n                }\r\n                return permission;\r\n            });\r\n\r\n            setPermissions(updatedPermissions);\r\n            setSelectedPermissionId(permissionId);\r\n\r\n            const updatedPermission = updatedPermissions.find(permission => permission.permission_Id === permissionId);\r\n            if (!updatedPermission) {\r\n                setErrorMessage('Updated permission not found. Please try again.');\r\n                return;\r\n            }\r\n\r\n            const { permission_Id: updatedPermissionId, userID, id, canAddOnly, canDeleteOnly, canUpdateOnly, canViewOnly } = updatedPermission;\r\n            await axios.put(`${ApiBaseUrl}/api/Permission/${updatedPermissionId}`, {\r\n                permission_Id: updatedPermissionId,\r\n                userID,\r\n                id,\r\n                canAddOnly,\r\n                canDeleteOnly,\r\n                canUpdateOnly,\r\n                canViewOnly\r\n            },{\r\n                headers:{\r\n                  Authorization : `Bearer ${user?.token}`,\r\n                }\r\n              });\r\n            setSuccessMessage('Permissions updated successfully');\r\n        } catch (error) {\r\n            console.error('Error updating permissions:', error);\r\n            setErrorMessage('Error updating permissions. Please try again.');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleAssignPermissions = () => {\r\n        navigate(`/Users/AddPermissions/${encrypt(userId)}`);\r\n    };\r\n\r\n    const getModuleNameById = (moduleId) => {\r\n        const module = modules.find(m => m.id === moduleId);\r\n        return module ? module.name : 'Unknown';\r\n    };\r\n\r\n    return (\r\n        <PermissionChecker>\r\n        {({ hasPermission }) => (\r\n            hasPermission(7, 'canUpdateOnly') &&  // Check if user has permission to update permissions\r\n\r\n            <Container>\r\n                {successMessage && !loading && <Alert variant=\"success\" className=\"mt-3\">{successMessage}</Alert>}\r\n                {errorMessage && !loading && <Alert variant=\"danger\" className=\"mt-3\">{errorMessage}</Alert>}\r\n                \r\n                <Row className=\"justify-content-center\">\r\n                    <Col md={12}>\r\n                        <Card>\r\n                            <Card.Header as=\"h5\" className=\"text-center\">Update Permissions</Card.Header>\r\n                            <Card.Body>\r\n                                <Form className='table-responsive'>\r\n                                    <Table bordered>\r\n                                        <thead>\r\n                                            <tr>\r\n                                                <th>Module Name</th>\r\n                                                <th>Can View</th>\r\n                                                <th>Can Add</th>\r\n                                                <th>Can Update</th>\r\n                                                <th>Can Delete</th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {permissions.length > 0 ? permissions.map(permission => (\r\n                                                <tr key={permission.permission_Id}>\r\n                                                    <td>{getModuleNameById(permission.id)}</td>\r\n                                                    <td>\r\n                                                        <Form.Check\r\n                                                            type=\"switch\"\r\n                                                            id={`${getModuleNameById(permission.id)}-canview-switch`}\r\n                                                            label=\"\"\r\n                                                            checked={permission.canViewOnly}\r\n                                                            onChange={e => handlePermissionChange(permission.permission_Id, 'canViewOnly', e.target.checked)}\r\n                                                        />\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <Form.Check\r\n                                                            type=\"switch\"\r\n                                                            id={`${getModuleNameById(permission.id)}-canadd-switch`}\r\n                                                            label=\"\"\r\n                                                            checked={permission.canAddOnly}\r\n                                                            onChange={e => handlePermissionChange(permission.permission_Id, 'canAddOnly', e.target.checked)}\r\n                                                        />\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <Form.Check\r\n                                                            type=\"switch\"\r\n                                                            id={`${getModuleNameById(permission.id)}-canupdate-switch`}\r\n                                                            label=\"\"\r\n                                                            checked={permission.canUpdateOnly}\r\n                                                            onChange={e => handlePermissionChange(permission.permission_Id, 'canUpdateOnly', e.target.checked)}\r\n                                                        />\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        <Form.Check\r\n                                                            type=\"switch\"\r\n                                                            id={`${getModuleNameById(permission.id)}-candelete-switch`}\r\n                                                            label=\"\"\r\n                                                            checked={permission.canDeleteOnly}\r\n                                                            onChange={e => handlePermissionChange(permission.permission_Id, 'canDeleteOnly', e.target.checked)}\r\n                                                        />\r\n                                                    </td>\r\n                                                </tr>\r\n                                            )) : (\r\n                                                <tr>\r\n                                                    <td colSpan=\"5\" className=\"text-center\">\r\n                                                        {errorMessage}\r\n                                                        <Button variant=\"primary\" onClick={handleAssignPermissions}>Assign Permissions</Button>\r\n                                                    </td>\r\n                                                </tr>\r\n                                            )}\r\n                                        </tbody>\r\n                                    </Table>\r\n                                </Form>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        )}\r\n        </PermissionChecker>\r\n    );\r\n};\r\n\r\nUpdatePermissionPage.propTypes = {\r\n    userId: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default UpdatePermissionPage;\r\n"],"names":["SecretKey","process","REACT_APP_SECRET_KEY","SecurityContext","createContext","encrypt","data","CryptoJS","toString","replace","decrypt","encryptedData","Utf8","useSecurity","useContext","Permission","users","setUsers","useState","user","useUser","selectedUser","setSelectedUser","userDepartment","setUserDepartment","showPermissionPage","setShowPermissionPage","useEffect","async","response","axios","get","concat","headers","Authorization","token","error","console","fetchUsers","_jsx","Container","className","children","_jsxs","Row","Col","md","Card","Body","Select","options","map","value","userId","label","firstName","lastName","departmentname","filterOption","_ref","searchString","toLowerCase","includes","placeholder","onChange","Button","onClick","handleViewPermission","UpdatePermissionPage","ApiBaseUrl","permissions","setPermissions","modules","setModules","loading","setLoading","successMessage","setSuccessMessage","errorMessage","setErrorMessage","selectedPermissionId","setSelectedPermissionId","navigate","useNavigate","length","fetchPermissions","fetchModules","handlePermissionChange","permissionId","field","isChecked","updatedPermissions","permission","permission_Id","canAddOnly","canUpdateOnly","canDeleteOnly","canViewOnly","updatedPermission","find","updatedPermissionId","userID","id","put","handleAssignPermissions","getModuleNameById","moduleId","module","m","name","PermissionChecker","_ref2","hasPermission","Alert","variant","Header","as","Form","Table","bordered","Check","type","checked","e","target","colSpan"],"sourceRoot":""}